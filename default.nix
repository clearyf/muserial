# Generated by carnix 0.6.6: carnix -o default.nix --src ./. Cargo.lock
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  muserial = f: muserial_0_1_0 { features = muserial_0_1_0_features { muserial_0_1_0 = f; }; };
  argparse_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "argparse";
    version = "0.2.1";
    authors = [ "paul@colomiets.name" ];
    sha256 = "1ikpi507ppxv5iw8vi8wps081r5p3bliaji35kw4468pbmg4gx5b";
    inherit dependencies buildDependencies features;
  };
  bitflags_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "0.7.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1hr72xg5slm0z4pxs2hiy4wcyx3jva70h58b7mid8l0a4c8f7gn5";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0p4b3nr0s5nda2qmm7xdhnvh4lkqk3xd8l9ffmwbvqw137vx7mj1";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0x06hvrrqy96m97593823vvxcgvjaxckghwyy2jcyc8qc7c6cyhi";
    inherit dependencies buildDependencies features;
  };
  epoll_2_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "epoll";
    version = "2.1.0";
    authors = [ "Nathan Sizemore <nathanrsizemore@gmail.com>" ];
    sha256 = "19j97yzyyivq54zdic45my3q73a29w429ddgn8d8avpfzrk84xpc";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
    inherit dependencies buildDependencies features;
  };
  iovec_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "iovec";
    version = "0.1.2";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0vjymmb7wj4v4kza5jjn48fcdb85j3k37y7msjl3ifz0p9yiyp2r";
    inherit dependencies buildDependencies features;
  };
  kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazycell_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazycell";
    version = "0.6.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Nikita Pekin <contact@nikitapek.in>" ];
    sha256 = "1ax148clinbvp6alxcih8s5i2bg3mc5mi69n3hvzvzbwlm6k532r";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_32_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.32";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1i8njlar6v9qvmkyfvwzhxrvkqw6ijp8fqdnya5csqixxz18a532";
    inherit dependencies buildDependencies features;
  };
  log_0_4_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.4.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "01vm8yy3wngvyj6qp1x3xpcb4xq7v67yn9l7fsma8kz28mliz90d";
    inherit dependencies buildDependencies features;
  };
  mio_0_6_14_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio";
    version = "0.6.14";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0zws9p0d734qps4wdv47d32mmpb85caf9l2arwhxc7pslqk4icap";
    inherit dependencies buildDependencies features;
  };
  miow_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "14f8zkc6ix7mkyis1vsqnim8m29b6l55abkba3p2yz7j1ibcvrl0";
    inherit dependencies buildDependencies features;
  };
  muserial_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "muserial";
    version = "0.1.0";
    authors = [ "Fionn Cleary <fionn.cleary@streamunlimited.com>" ];
    src = ./.;
    inherit dependencies buildDependencies features;
  };
  net2_0_2_31_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "net2";
    version = "0.2.31";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "13mphllfcbybsdqyi1jb3kyqx65m8ch07drr59a4wb3yl89awm7y";
    inherit dependencies buildDependencies features;
  };
  slab_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "slab";
    version = "0.4.0";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1qy2vkgwqgj5z4ygdkh040n9yh1vz80v5flxb1xrvw3i4wxs7yx0";
    inherit dependencies buildDependencies features;
  };
  winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
    inherit dependencies buildDependencies features;
  };
  winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
    inherit dependencies buildDependencies features;
  };
  ws2_32_sys_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ws2_32-sys";
    version = "0.2.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1zpy9d9wk11sj17fczfngcj28w4xxjs3b4n036yzpy38dxp4f7kc";
    libName = "ws2_32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  argparse_0_2_1 = { features?(argparse_0_2_1_features {}) }: argparse_0_2_1_ {};
  argparse_0_2_1_features = f: updateFeatures f (rec {
    argparse_0_2_1.default = (f.argparse_0_2_1.default or true);
  }) [];
  bitflags_0_7_0 = { features?(bitflags_0_7_0_features {}) }: bitflags_0_7_0_ {};
  bitflags_0_7_0_features = f: updateFeatures f (rec {
    bitflags_0_7_0.default = (f.bitflags_0_7_0.default or true);
  }) [];
  bitflags_1_0_1 = { features?(bitflags_1_0_1_features {}) }: bitflags_1_0_1_ {
    features = mkFeatures (features.bitflags_1_0_1 or {});
  };
  bitflags_1_0_1_features = f: updateFeatures f (rec {
    bitflags_1_0_1.default = (f.bitflags_1_0_1.default or true);
    bitflags_1_0_1.example_generated =
      (f.bitflags_1_0_1.example_generated or false) ||
      (f.bitflags_1_0_1.default or false) ||
      (bitflags_1_0_1.default or false);
  }) [];
  cfg_if_0_1_2 = { features?(cfg_if_0_1_2_features {}) }: cfg_if_0_1_2_ {};
  cfg_if_0_1_2_features = f: updateFeatures f (rec {
    cfg_if_0_1_2.default = (f.cfg_if_0_1_2.default or true);
  }) [];
  epoll_2_1_0 = { features?(epoll_2_1_0_features {}) }: epoll_2_1_0_ {
    dependencies = mapFeatures features ([ bitflags_0_7_0 libc_0_2_32 ]);
  };
  epoll_2_1_0_features = f: updateFeatures f (rec {
    bitflags_0_7_0.default = true;
    epoll_2_1_0.default = (f.epoll_2_1_0.default or true);
    libc_0_2_32.default = true;
  }) [ bitflags_0_7_0_features libc_0_2_32_features ];
  fuchsia_zircon_0_3_3 = { features?(fuchsia_zircon_0_3_3_features {}) }: fuchsia_zircon_0_3_3_ {
    dependencies = mapFeatures features ([ bitflags_1_0_1 fuchsia_zircon_sys_0_3_3 ]);
  };
  fuchsia_zircon_0_3_3_features = f: updateFeatures f (rec {
    bitflags_1_0_1.default = true;
    fuchsia_zircon_0_3_3.default = (f.fuchsia_zircon_0_3_3.default or true);
    fuchsia_zircon_sys_0_3_3.default = true;
  }) [ bitflags_1_0_1_features fuchsia_zircon_sys_0_3_3_features ];
  fuchsia_zircon_sys_0_3_3 = { features?(fuchsia_zircon_sys_0_3_3_features {}) }: fuchsia_zircon_sys_0_3_3_ {};
  fuchsia_zircon_sys_0_3_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_sys_0_3_3.default = (f.fuchsia_zircon_sys_0_3_3.default or true);
  }) [];
  iovec_0_1_2 = { features?(iovec_0_1_2_features {}) }: iovec_0_1_2_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_32 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_2_8 ]) else []);
  };
  iovec_0_1_2_features = f: updateFeatures f (rec {
    iovec_0_1_2.default = (f.iovec_0_1_2.default or true);
    libc_0_2_32.default = true;
    winapi_0_2_8.default = true;
  }) [ libc_0_2_32_features winapi_0_2_8_features ];
  kernel32_sys_0_2_2 = { features?(kernel32_sys_0_2_2_features {}) }: kernel32_sys_0_2_2_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  kernel32_sys_0_2_2_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = (f.kernel32_sys_0_2_2.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  lazycell_0_6_0 = { features?(lazycell_0_6_0_features {}) }: lazycell_0_6_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazycell_0_6_0 or {});
  };
  lazycell_0_6_0_features = f: updateFeatures f (rec {
    lazycell_0_6_0.clippy =
      (f.lazycell_0_6_0.clippy or false) ||
      (f.lazycell_0_6_0.nightly-testing or false) ||
      (lazycell_0_6_0.nightly-testing or false);
    lazycell_0_6_0.default = (f.lazycell_0_6_0.default or true);
    lazycell_0_6_0.nightly =
      (f.lazycell_0_6_0.nightly or false) ||
      (f.lazycell_0_6_0.nightly-testing or false) ||
      (lazycell_0_6_0.nightly-testing or false);
  }) [];
  libc_0_2_32 = { features?(libc_0_2_32_features {}) }: libc_0_2_32_ {
    features = mkFeatures (features.libc_0_2_32 or {});
  };
  libc_0_2_32_features = f: updateFeatures f (rec {
    libc_0_2_32.default = (f.libc_0_2_32.default or true);
    libc_0_2_32.use_std =
      (f.libc_0_2_32.use_std or false) ||
      (f.libc_0_2_32.default or false) ||
      (libc_0_2_32.default or false);
  }) [];
  log_0_4_1 = { features?(log_0_4_1_features {}) }: log_0_4_1_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_2 ]);
    features = mkFeatures (features.log_0_4_1 or {});
  };
  log_0_4_1_features = f: updateFeatures f (rec {
    cfg_if_0_1_2.default = true;
    log_0_4_1.default = (f.log_0_4_1.default or true);
  }) [ cfg_if_0_1_2_features ];
  mio_0_6_14 = { features?(mio_0_6_14_features {}) }: mio_0_6_14_ {
    dependencies = mapFeatures features ([ iovec_0_1_2 lazycell_0_6_0 log_0_4_1 net2_0_2_31 slab_0_4_0 ])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_3_3 fuchsia_zircon_sys_0_3_3 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_32 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 miow_0_2_1 winapi_0_2_8 ]) else []);
    features = mkFeatures (features.mio_0_6_14 or {});
  };
  mio_0_6_14_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_3_3.default = true;
    fuchsia_zircon_sys_0_3_3.default = true;
    iovec_0_1_2.default = true;
    kernel32_sys_0_2_2.default = true;
    lazycell_0_6_0.default = true;
    libc_0_2_32.default = true;
    log_0_4_1.default = true;
    mio_0_6_14.default = (f.mio_0_6_14.default or true);
    mio_0_6_14.with-deprecated =
      (f.mio_0_6_14.with-deprecated or false) ||
      (f.mio_0_6_14.default or false) ||
      (mio_0_6_14.default or false);
    miow_0_2_1.default = true;
    net2_0_2_31.default = true;
    slab_0_4_0.default = true;
    winapi_0_2_8.default = true;
  }) [ iovec_0_1_2_features lazycell_0_6_0_features log_0_4_1_features net2_0_2_31_features slab_0_4_0_features fuchsia_zircon_0_3_3_features fuchsia_zircon_sys_0_3_3_features libc_0_2_32_features kernel32_sys_0_2_2_features miow_0_2_1_features winapi_0_2_8_features ];
  miow_0_2_1 = { features?(miow_0_2_1_features {}) }: miow_0_2_1_ {
    dependencies = mapFeatures features ([ kernel32_sys_0_2_2 net2_0_2_31 winapi_0_2_8 ws2_32_sys_0_2_1 ]);
  };
  miow_0_2_1_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = true;
    miow_0_2_1.default = (f.miow_0_2_1.default or true);
    net2_0_2_31.default = (f.net2_0_2_31.default or false);
    winapi_0_2_8.default = true;
    ws2_32_sys_0_2_1.default = true;
  }) [ kernel32_sys_0_2_2_features net2_0_2_31_features winapi_0_2_8_features ws2_32_sys_0_2_1_features ];
  muserial_0_1_0 = { features?(muserial_0_1_0_features {}) }: muserial_0_1_0_ {
    dependencies = mapFeatures features ([ argparse_0_2_1 libc_0_2_32 mio_0_6_14 ]);
  };
  muserial_0_1_0_features = f: updateFeatures f (rec {
    argparse_0_2_1.default = true;
    libc_0_2_32.default = true;
    mio_0_6_14.default = true;
    muserial_0_1_0.default = (f.muserial_0_1_0.default or true);
  }) [ argparse_0_2_1_features libc_0_2_32_features mio_0_6_14_features ];
  net2_0_2_31 = { features?(net2_0_2_31_features {}) }: net2_0_2_31_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_2 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_32 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 winapi_0_2_8 ws2_32_sys_0_2_1 ]) else [])
      ++ (if kernel == "i686-apple-darwin" then mapFeatures features ([ libc_0_2_32 ]) else [])
      ++ (if kernel == "i686-unknown-linux-gnu" then mapFeatures features ([ libc_0_2_32 ]) else [])
      ++ (if kernel == "x86_64-apple-darwin" then mapFeatures features ([ libc_0_2_32 ]) else [])
      ++ (if kernel == "x86_64-unknown-linux-gnu" then mapFeatures features ([ libc_0_2_32 ]) else []);
    features = mkFeatures (features.net2_0_2_31 or {});
  };
  net2_0_2_31_features = f: updateFeatures f (rec {
    cfg_if_0_1_2.default = true;
    kernel32_sys_0_2_2.default = true;
    libc_0_2_32.default = true;
    net2_0_2_31.default = (f.net2_0_2_31.default or true);
    net2_0_2_31.duration =
      (f.net2_0_2_31.duration or false) ||
      (f.net2_0_2_31.default or false) ||
      (net2_0_2_31.default or false);
    winapi_0_2_8.default = true;
    ws2_32_sys_0_2_1.default = true;
  }) [ cfg_if_0_1_2_features libc_0_2_32_features kernel32_sys_0_2_2_features winapi_0_2_8_features ws2_32_sys_0_2_1_features libc_0_2_32_features libc_0_2_32_features libc_0_2_32_features libc_0_2_32_features ];
  slab_0_4_0 = { features?(slab_0_4_0_features {}) }: slab_0_4_0_ {};
  slab_0_4_0_features = f: updateFeatures f (rec {
    slab_0_4_0.default = (f.slab_0_4_0.default or true);
  }) [];
  winapi_0_2_8 = { features?(winapi_0_2_8_features {}) }: winapi_0_2_8_ {};
  winapi_0_2_8_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = (f.winapi_0_2_8.default or true);
  }) [];
  winapi_build_0_1_1 = { features?(winapi_build_0_1_1_features {}) }: winapi_build_0_1_1_ {};
  winapi_build_0_1_1_features = f: updateFeatures f (rec {
    winapi_build_0_1_1.default = (f.winapi_build_0_1_1.default or true);
  }) [];
  ws2_32_sys_0_2_1 = { features?(ws2_32_sys_0_2_1_features {}) }: ws2_32_sys_0_2_1_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  ws2_32_sys_0_2_1_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
    ws2_32_sys_0_2_1.default = (f.ws2_32_sys_0_2_1.default or true);
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
}
